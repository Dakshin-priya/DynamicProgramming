class Solution {

    private int helper(int grid[][],int m, int n, int dp[][])
    {
        if(grid[m][n] == 1)
            dp[m][n]=0;

        if(m==0 && n==0 && grid[m][n]!=1) return 1;

        if(m==0 && n==0 && grid[m][n]==1) return 0;

        if( dp[m][n] != -1) return dp[m][n];

        else if( m==0 && n!=0)
           dp[m][n]= helper(grid,m,n-1,dp);

        else if(m!=0 && n==0)
            dp[m][n] = helper(grid,m-1,n,dp);

        else if(m!=0 && n!=0)
            dp[m][n]= helper(grid,m-1,n,dp)+helper(grid,m,n-1,dp);

        return dp[m][n];
    }

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m= obstacleGrid.length;
        int n= obstacleGrid[0].length;

        int dp[][] = new int[m][n];

        for(int i[] : dp)
        {
            Arrays.fill(i,-1);
        }

        return helper(obstacleGrid,m-1,n-1,dp);
    }
}
